PROJECT(ireport)

SET(IREPORT_PRODUCT_NAME "IReport")

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.9)

CMAKE_POLICY(SET CMP0012 NEW)
IF("${CMAKE_VERSION}" VERSION_GREATER 2.8.11.1)
    CMAKE_POLICY(SET CMP0020 NEW)
ENDIF("${CMAKE_VERSION}" VERSION_GREATER 2.8.11.1)

MESSAGE("CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR}")
MESSAGE("CMAKE_BINARY_DIR ${CMAKE_BINARY_DIR}")

SET(CMAKE_MODULE_PATH 
	${CMAKE_SOURCE_DIR}/cmake
)

# Automatically run moc, if required
SET(CMAKE_AUTOMOC ON)
# Verbose makefile
SET(CMAKE_VERBOSE_MAKEFILE ON)

# Detect debug build
IF(CMAKE_BUILD_TYPE MATCHES Debug)
    SET(LE d)
ENDIF(CMAKE_BUILD_TYPE MATCHES Debug)

IF(MSVC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -nologo -Zc:wchar_t")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -nologo -Zc:wchar_t -w34100 -w34189")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NOLOGO /DYNAMICBASE /NXCOMPAT")
ENDIF(MSVC)

# Qt
SET(QT_VERSION_MAJOR 5)
SET(CMAKE_PREFIX_PATH "C:\\Program Files\\Microsoft SDKs\\Windows\\v7.0A\\Lib\\x64")
FIND_PACKAGE(Qt5Core REQUIRED)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Webkit REQUIRED)
FIND_PACKAGE(Qt5WebkitWidgets REQUIRED)
	
# Add compiler flags for building executables (-fPIE)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS}")

IF(Qt5_POSITION_INDEPENDENT_CODE)
    SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
ENDIF(Qt5_POSITION_INDEPENDENT_CODE)

# Set Qt bin dir to find QtCoreX.dll and other libs to install
IF(MINGW OR MSVC)
    STRING(REGEX REPLACE "([^ ]+)[/\\].*" "\\1" QT_BIN_DIR_TMP "${QT_MOC_EXECUTABLE}")
    STRING(REGEX REPLACE "\\\\" "/" QT_BIN_DIR "${QT_BIN_DIR_TMP}")  # Replace back slashes to slashes
ENDIF(MINGW OR MSVC)

ADD_SUBDIRECTORY(src) 

ADD_SUBDIRECTORY(package)
